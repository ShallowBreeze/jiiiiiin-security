#spring.profiles.active=test或者pro 来控制加载哪个环境的配置,完整命令如下:
#java -jar xxxxx.jar --spring.profiles.active=test  表示加载测试环境的配置
#java -jar xxxxx.jar --spring.profiles.active=pro  表示加载生产环境的配置

#查看springboot开启了哪些配置
debug: false

# Apollo客户端依赖于AppId https://github.com/ctripcorp/apollo/wiki/Java客户端使用指南
app:
  # 需要手动创建，或者直接用apollo默认给出的应用id
  id: jiiiiiin-server-manager
apollo:
  # Apollo Meta Server https://github.com/ctripcorp/apollo/wiki/Java客户端使用指南#122-apollo-meta-server
  # meta server和config service是部署在同一个JVM进程，所以meta server的地址就是config service的地址。
  meta: http://localhost:8080
  # 本地缓存路径
  # 默认会存储再/opt/data/「appid」
  # 对应的目录需要有读写权限
  cacheDir: /Users/jiiiiiin/Documents/IdeaProjects/jiiiiiin-security/apollo-cache-dir
  # Cluster（集群）
  cluster: default
  bootstrap:
    # 注入默认application namespace的配置示例
    enabled: true
    # 把日志相关的配置（如logging.level.root=info或logback-spring.xml中的参数）也放在Apollo管理
    eagerLoad:
      enabled: true
  # Spring Placeholder的使用
  autoUpdateInjectedSpringProperties: true

# 通过apollo配置
server:
  port: 9090
  # 测试微信、qq授权登录时候启用
  #  port: 80
  servlet:
    session:
      timeout: 60
#eureka:
#  client:
#    service-url:
#      # 指定服务注册中心的地址
#      defaultZone: http://jiiiiiin-eureka:8761/eureka/
logging:
  level:
    # 配置日志输出级别以观察SQL的执行情况
    com:
      springboot:
        mapper: debug
    org:
      springframework:
        security: debug
spring:
  jackson:
    default-property-inclusion: non_null
  thymeleaf:
    cache: false
    # 避免Thymeleaf对html语法检查过严 https://www.jianshu.com/p/b361a6acbe0cz
    mode: LEGACYHTML5
    encoding: UTF-8
    prefix: classpath:/templates/
  # https://docs.spring.io/spring-session/docs/current/reference/html5/guides/boot-redis.html
#  session:
#    store-type: redis
  # https://segmentfault.com/a/1190000013269653
  #  cache:
  #    # 缓存的技术类型
  #    ehcache:
  #      config: 'classpath:def-ehcache-config.xml'
  #    type: ehcache
#  redis:
#    # http://blog.didispace.com/springbootredis/
#    # https://www.jianshu.com/p/feef1421ab0b
#    # http://www.iocoder.cn/Spring-Boot/battcn/v2-nosql-redis/
#    # 配置redis链接地址
#    host: jiiiiiin-redis
#    port: 6379
#    # Redis数据库索引（默认为0）
#    database: 0
#    lettuce:
#      pool:
#        # 连接池最大连接数（使用负值表示没有限制）
#        max-active: 8
#        # 连接池最大阻塞等待时间（使用负值表示没有限制）
#        max-wait: -1
#        # 连接池中的最大空闲连接
#        max-idle: 8
#        # 连接池中的最小空闲连接
#        min-idle: 0
#      # 连接超时时间（毫秒）
#      timeout: 0
#    # Redis服务器连接密码（默认为空）
#    password:
  boot:
    admin:
      client:
        url: http://jiiiiiin-springboot-admin:5000
# 自定义配置
#jiiiiiin:
#  security:
#    # https://github.com/jojozhai/security
#    social:
#      filterProcessesUrl: /qqLogin
#      qq:
#        app-id: 100550231
#        app-secret: 69b6ab57b22f3c2fe6a6149274e3295e
#        # 覆盖默认的`/auth`用于测试
#        # 覆盖默认的`/qq`用于测试
#        providerId: callback.do
#      weixin:
#        app-id: wxd99431bbff8305a0
#        app-secret: 60f78681d063590a469f1b297feff3c4
#        providerId: weixin
#    validate:
#      image-code:
#        type: EASYCAPTCHA_GIF_TYPE_NUM_AND_UPPER
#        width: 70
#        length: 2
#        interceptor-urls: ${server.context-path}/authentication/form,${server.context-path}/authentication/mobile
#    browser:
#      fontUrl: http://manager-server:9000/
#      signInUrl: /signIn
#      sign-up-url: /signUp
#      sign-out-url: /signOut
#      # 以下设置非必须
#      rememberMeSeconds: 3600
#      proxy-uri: http://www.pinzhi365.com

management:
  endpoints:
    web:
      exposure:
        # As with Spring Boot 2 most of the endpoints aren’t exposed via http by default, we expose all of them. For production you should carefully choose which endpoints to expose.
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS
      # 无效

