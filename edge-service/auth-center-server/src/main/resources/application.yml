#spring.profiles.active=test或者pro 来控制加载哪个环境的配置,完整命令如下:
#java -jar xxxxx.jar --spring.profiles.active=test  表示加载测试环境的配置
#java -jar xxxxx.jar --spring.profiles.active=pro  表示加载生产环境的配置

#查看springboot开启了哪些配置
debug: false

## Apollo客户端依赖于AppId https://github.com/ctripcorp/apollo/wiki/Java客户端使用指南
#app:
#  # 需要手动创建，或者直接用apollo默认给出的应用id
#  id: jiiiiiin-server-manager
#apollo:
#  # Apollo Meta Server https://github.com/ctripcorp/apollo/wiki/Java客户端使用指南#122-apollo-meta-server
#  # meta server和config service是部署在同一个JVM进程，所以meta server的地址就是config service的地址。
#  meta: http://localhost:8080
#  # 本地缓存路径
#  # 默认会存储再/opt/data/「appid」
#  # 对应的目录需要有读写权限
#  cacheDir: /Users/jiiiiiin/Documents/IdeaProjects/jiiiiiin-security/apollo-cache-dir
#  # Cluster（集群）
#  cluster: default
#  bootstrap:
#    # 注入默认application namespace的配置示例
#    enabled: true
#    # 把日志相关的配置（如logging.level.root=info或logback-spring.xml中的参数）也放在Apollo管理
#    eagerLoad:
#      enabled: true
#  # Spring Placeholder的使用
#  autoUpdateInjectedSpringProperties: true

#eureka:
#  client:
#    service-url:
#      # 指定服务注册中心的地址
#      defaultZone: http://localhost:8761/eureka/
#    register-with-eureka: true
#    fetch-registry: true

# 通过apollo配置
server:
  port: 8888
eureka:
  client:
    service-url:
      # 指定服务注册中心的地址
      defaultZone: http://jiiiiiin-eureka:8761/eureka/
logging:
  level:
    org:
      springframework:
        security: debug
    cn:
      jiiiiiin: debug
feign:
  hystrix:
    # Feign是自带断路器的，在D版本的Spring Cloud之后，它没有默认打开。需要在配置文件中配置打开它，在配置文件加以下代码
    enabled: true
spring:
  application:
    name: auth-center-server
  oauth2:
    resource:
      # https://my.oschina.net/buwei/blog/910028
      filter-order: 3
  jackson:
    default-property-inclusion: non_null
  redis:
    # 配置redis链接地址
    host: jiiiiiin-redis
    port: 6379
    # Redis数据库索引（默认为0）
    database: 0
    jedis:
      pool:
        # 连接池最大连接数（使用负值表示没有限制）
        max-active: 8
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        #        max-wait: -1
        # 连接池中的最大空闲连接
        max-idle: 8
        # 连接池中的最小空闲连接
        min-idle: 0
      # 连接超时时间（毫秒）
      timeout: 0
  boot:
    admin:
      client:
        url: http://jiiiiiin-springboot-admin:5000

# 自定义配置
jiiiiiin:
  security:
    oauth2:
      tokenStore:
        jwt
        # redis
      clients:
        - clientId: pweb
          clientSecret: pweb
    validate:
      image-code:
        type: EASYCAPTCHA_GIF_TYPE_NUM_AND_UPPER
        width: 70
        length: 2
        interceptor-urls: ${server.context-path}/authentication/form,${server.context-path}/authentication/mobile

management:
  endpoints:
    web:
      exposure:
        # As with Spring Boot 2 most of the endpoints aren’t exposed via http by default, we expose all of them. For production you should carefully choose which endpoints to expose.
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS
      # 无效

