# Apollo客户端依赖于AppId https://github.com/ctripcorp/apollo/wiki/Java客户端使用指南
app:
  # TODO 待修改名称
  # 需要手动创建，或者直接用apollo默认给出的应用id
  id: jiiiiiin-gateway
apollo:
  # Apollo Meta Server https://github.com/ctripcorp/apollo/wiki/Java客户端使用指南#122-apollo-meta-server
  # meta server和config service是部署在同一个JVM进程，所以meta server的地址就是config service的地址。
  meta: http://localhost:8080
  # 本地缓存路径
  cacheDir: /Users/jiiiiiin/Documents/IdeaProjects/jiiiiiin-security/apollo-cache-dir
  # Cluster（集群）
  cluster: default
  bootstrap:
    # 注入默认application namespace的配置示例
    enabled: true
    # 把日志相关的配置（如logging.level.root=info或logback-spring.xml中的参数）也放在Apollo管理
    eagerLoad:
      enabled: true
  # Spring Placeholder的使用
  autoUpdateInjectedSpringProperties: true

# 自定义配置
jiiiiiin:
  security:
    publicApi:
      - /
      - /index
      - /api/ac/oauth/* # TODO 只放开需要的端点
      - /api/ac/code/*
      - /error # TODO 默认spring security或者应用在直接响应401的状态时候回访问该端点
      - /actuator/** # 需要注意安全问题
    oauth2:
      enableAuthorizationServer: false
      tokenStore:
        jwt
      # redis
      clients:
        - clientId: pweb
          clientSecret: pweb

# 参考：http://blog.didispace.com/springcloud5/
zuul:
  # 全局关闭重试机制
  # 指定路由关闭重试机制
  # zuul.routes.<route>.retryable=false
  # 关于重试 https://blog.csdn.net/WYA1993/article/details/82770827
  retryable: false
  # 上下文
  prefix: /api
  # 配置路由信息
  routes:
    # 微服务的自定义名称
#    manager-server:
#      # TODO 待修改将`manager-server`也注册到eureka上面
#      # 当前微服务的匹配前缀，对应微服务的`context-path`，进行url匹配
#      path: /mng/**
#      # 微服务对应`application.name`
#      # 去eureka server获取对应的注册信息发起负载均衡器调用
#      #      serviceId: manager-server
#      # 直接通过地址调用
#      url: http://localhost:9090
#      # 不过滤上下文，这里指的是对应微服务的对应微服务的`context-path`，如果微服务本身配置了`context-path`这里需要设置为false
#      strip-prefix: false
#      # 放开对于敏感头的过滤（支持cookie传递）
#      sensitiveHeaders:
    auth-center-server:
      path: /ac/**
      serviceId: auth-center-server
      strip-prefix: true
      # 放开对于敏感头的过滤（支持cookie传递）
      sensitiveHeaders: Cookie,Set-Cookie
    user-server:
      path: /user/**
      serviceId: user-server
      strip-prefix: true
    jiiiiiin-product:
      path: /product/**
      serviceId: jiiiiiin-product
      strip-prefix: true
    jiiiiiin-order:
      path: /order/**
      serviceId: jiiiiiin-order
      strip-prefix: false
  # 用来设置不希望被API网关进行路由的URL表达式
#  ignored-patterns: /**/product/**
#  ignored-patterns:
#    - /product/**

logging:
  level:
    org:
      springframework:
        security: debug
        cloud:
          netflix:
            zuul: info
    # 配置日志输出级别以观察SQL的执行情况
    cn:
      jiiiiiin: debug
    com:
      springboot:
        mapper: debug

# 避免初次启动，因为延迟初始化bean的原因导致的访问超时
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            # 该参数用来设置API网关中路由转发请求的HystrixCommand超时时间，单位为毫秒。当路由转发请求的命令执行时间超过该配置值后，Hystrix会将该执行命令标记为TIMEOUT并抛出异常。
            timeoutInMilliseconds: 8000

ribbon:
  # 该参数用来设置路由转发请求的时候，创建请求连接的超时时间。
  # 当ribbon.ConnectTimeout的配置值小于hystrix.command.default.execution.isolation.thread.timeoutMilliseconds配置值的时候，若出现路由请求连接超时，会自动进行重试路由请求，如果重试依然失败，Zuul会抛出异常。
  # 如果ribbon.ConnectTimeout的配置值大于hystrix.command.default.execution.isolation.thread.timeoutMilliseconds配置值的时候，不会进行请求重试，直接抛出异常。
  ConnectTimeout: 4000
  # 该参数用来设置路由转发请求的超时时间。它的处理与ribbon.ConnectTimeout相似，当ribbon.ReadTimeout的配置值小于hystrix.command.default.execution.isolation.thread.timeoutMilliseconds配置值的时候，若出现路由请求连接超时，会自动进行重试路由请求，如果重试依然失败，Zuul会抛出异常。如果ribbon.ReadTimeout的配置值大于hystrix.command.default.execution.isolation.thread.timeoutMilliseconds配置值的时候，不会进行请求重试，直接抛出异常。
  ReadTimeout: 4000

spring:
  application:
    name: jiiiiiin-gateway
  sleuth:
    web:
      client:
        enabled: true
    sampler:
      # 将采样比例设置为 1.0，也就是全部都需要。默认是 0.1
      probability: 1.0
  zipkin:
    # 指定了 Zipkin 服务器的地址
    base-url: http://jiiiiiin-zipkin:9411/
  oauth2:
    resource:
      # https://my.oschina.net/buwei/blog/910028
      filter-order: 3
  jackson:
    default-property-inclusion: non_null
  thymeleaf:
    cache: false
    # 避免Thymeleaf对html语法检查过严 https://www.jianshu.com/p/b361a6acbe0cz
    mode: LEGACYHTML5
    encoding: UTF-8
    prefix: classpath:/templates/
  # https://docs.spring.io/spring-session/docs/current/reference/html5/guides/boot-redis.html
  redis:
    # 配置redis链接地址
    host: jiiiiiin-redis
    port: 6379
    # Redis数据库索引（默认为0）
    database: 0
    jedis:
      pool:
        # 连接池最大连接数（使用负值表示没有限制）
        max-active: 8
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        #        max-wait: -1
        # 连接池中的最大空闲连接
        max-idle: 8
        # 连接池中的最小空闲连接
        min-idle: 0
      # 连接超时时间（毫秒）
      timeout: 0


management:
  endpoints:
    web:
      exposure:
        # As with Spring Boot 2 most of the endpoints aren’t exposed via http by default, we expose all of them. For production you should carefully choose which endpoints to expose.
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS
      # 无效
server:
  port: 8861
